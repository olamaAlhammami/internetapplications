/////post Router
const uuid =require('uuid')
//body parser middleware
app.use(express.json()) //allow us to handle raw json
//we can handle URL encoded data
app.use(express.urlencoded(extended:false)) 
app.post('/api/members', (req, res) => {
  //res.send(req.body)
  const newMember = {
    id: uuid.v4(),
    name: req.body.name,
    email: req.body.email,
    status:'active'
  };
  if(!newMember.name || !newMember.email){
    return res.status(400).json({msg : 'Please include a name and an email'});
    }
    members.push(newMember);
    res.json(members);
///update
app.put('/api/members/:id', (req, res) => {
  // chech to see if the member exists
  const found = members.some((member) =>
  member.id === parseInt(req.params.id))
  if (found) {
  const updMember = req.body
  members.forEach(member => {
  if (member.id === parseInt(req.params.id)) {
  member.name = updMember.name ? updMember.name : member.name;
  member.email = updMember.email ? updMember.email : member.email;
  res.json({ msg: 'member updated', member });
  }
  })
  } else {
    res.status(400).json({ msg: `no member with the id of ${req.params.id}` })
}
});
///delete memeber
app.delete('/api/members/:id', (req, res) => {
  const found = members.some((member) => member.id === parseInt(req.params.id));
  if (found) {
  res.json({ msg: 'member deleted',
    members: members.filter(member => member.id !== parseInt(req.params.id))});
  } else {
  res.status(400).json({ msg: `no member with the id of ${req.params.id}` });
  }
  })